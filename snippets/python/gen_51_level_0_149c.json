{
  "title": "gen_51_level_0_149c",
  "code": "Here's a simple yet slightly modernized Python function to check if a word is a palindrome. I'll incorporate a DSL-inspired approach by defining a small internal domain-specific language for string transformations, then apply model inference logic in a basic form (e.g., normalizing input) before checking palindrome status.\n\n```python\ndef is_palindrome(word: str) -> bool:\n    # DSL for string transformations\n    def transform(s):\n        # Define sequence of transformations as mini-DSL commands\n        commands = [\n            lambda x: x.lower(),          # normalize case\n            lambda x: ''.join(c for c in x if c.isalnum())  # remove non-alphanumeric\n        ]\n        for cmd in commands:\n            s = cmd(s)\n        return s\n\n    normalized = transform(word)\n    return normalized == normalized[::-1]\n```\n\nExample usage:\n\n```python\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))  # True\nprint(is_palindrome(\"Hello\"))                           # False\n```\n\nThis approach uses a DSL-inspired pipeline for input normalization before palindrome checking, which is a simple example of layered logic.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-0"
  ],
  "created_at": "2025-06-11T09:48:43.075193"
}