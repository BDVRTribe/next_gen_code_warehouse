{
  "title": "gen_50_level_1_f509",
  "code": "Here's a Python function to check if a word is a palindrome. I'll include a decorator to cache results for efficiency if the function is called multiple times with the same input, demonstrating use of advanced Python features.\n\n```python\nfrom functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef is_palindrome(word: str) -> bool:\n    \"\"\"\n    Check if the given word is a palindrome.\n    The check is case-insensitive and ignores non-alphanumeric characters.\n\n    Args:\n        word (str): The word to check.\n\n    Returns:\n        bool: True if the word is a palindrome, False otherwise.\n    \"\"\"\n    # Normalize: lowercase and filter only alphanumeric characters\n    filtered = ''.join(ch.lower() for ch in word if ch.isalnum())\n    return filtered == filtered[::-1]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_words = [\"Racecar\", \"hello\", \"A man, a plan, a canal: Panama\", \"No 'x' in Nixon\"]\n    for w in test_words:\n        print(f\"'{w}' -> {is_palindrome(w)}\")\n```\n\n**Explanation:**\n\n- Uses `@lru_cache` decorator to cache recent palindrome checks for faster repeated queries.\n- Normalizes input by lowercasing and removing non-alphanumeric characters to handle phrases and punctuation.\n- Compares the string to its reverse for palindrome check.\n- Includes example usage with mixed cases and punctuation.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-1"
  ],
  "created_at": "2025-06-11T09:48:37.650779"
}