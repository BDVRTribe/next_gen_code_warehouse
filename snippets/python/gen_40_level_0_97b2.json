{
  "title": "gen_40_level_0_97b2",
  "code": "Let's push beyond the usual palindrome check and invent a function that does more than a simple reversed string comparison. We'll create a **pattern-agnostic palindrome checker** that:\n\n- Ignores case, spaces, and punctuation.\n- Supports Unicode normalization (to handle accented characters).\n- Can detect palindromes in multi-word phrases.\n- Returns a detailed report on the palindrome status and the processed string.\n\nThis approach is both practical and innovative in handling real-world text input.\n\n```python\nimport unicodedata\nimport string\n\ndef is_palindrome(word: str) -> dict:\n    \"\"\"\n    Check if a given word or phrase is a palindrome, ignoring case, spaces, punctuation,\n    and Unicode accents. Returns a dictionary with detailed info.\n\n    Args:\n        word (str): The input string to check.\n\n    Returns:\n        dict: {\n            'original': original input,\n            'processed': processed string used for palindrome check,\n            'is_palindrome': True/False\n        }\n    \"\"\"\n    # Normalize Unicode (NFD form separates accents from letters)\n    normalized = unicodedata.normalize('NFD', word)\n    \n    # Filter out accents and non-letter characters\n    filtered_chars = []\n    for ch in normalized:\n        # Skip combining marks (accents)\n        if unicodedata.category(ch) == 'Mn':\n            continue\n        # Keep alphanumeric characters only\n        if ch.isalnum():\n            filtered_chars.append(ch.lower())\n    \n    processed = ''.join(filtered_chars)\n    is_pal = processed == processed[::-1]\n\n    return {\n        'original': word,\n        'processed': processed,\n        'is_palindrome': is_pal\n    }\n\n# Example usage\nif __name__ == \"__main__\":\n    examples = [\n        \"A man, a plan, a canal, Panama!\",\n        \"No lemon, no melon\",\n        \"D\u00e9j\u00e0 vu\",\n        \"Madam\",\n        \"Hello\"\n    ]\n    for example in examples:\n        result = is_palindrome(example)\n        print(f\"Original: {result['original']}\")\n        print(f\"Processed for check: {result['processed']}\")\n        print(f\"Is palindrome? {result['is_palindrome']}\\n\")\n```\n\n---\n\n### Explanation:\n\n- We normalize the string to Unicode NFD form to separate base characters and their accents.\n- We remove all combining marks (accents).\n- We filter out any character that is not alphanumeric.\n- We lower-case the string to ignore case.\n- We compare the processed string to its reverse.\n- We return a dictionary with the original string, the processed form, and the palindrome status.\n\nThis function is robust, handles complex text inputs, and is informative for deeper analysis.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-0"
  ],
  "created_at": "2025-06-11T09:47:42.171811"
}