{
  "title": "gen_43_level_0_2717",
  "code": "Here's a highly concise and Pythonic palindrome checker function. It also normalizes the input by ignoring case and non-alphanumeric characters, making it robust beyond just simple character reversals.\n\n```python\nimport re\n\ndef is_palindrome(word: str) -> bool:\n    # Normalize: keep only alphanumeric, lowercase\n    cleaned = re.sub(r'[^a-z0-9]', '', word.lower())\n    return cleaned == cleaned[::-1]\n```\n\n### Explanation:\n\n- Using regex to strip out spaces, punctuation, etc.\n- Lowercasing to make it case-insensitive.\n- Compare string with its reverse.\n\nExample usage:\n\n```python\nprint(is_palindrome(\"Racecar\"))       # True\nprint(is_palindrome(\"A man, a plan\")) # False\nprint(is_palindrome(\"A man, a plan, a canal: Panama\")) # True\n```\n\nThis approach generalizes palindrome checks well beyond simple words.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-0"
  ],
  "created_at": "2025-06-11T09:47:53.741711"
}