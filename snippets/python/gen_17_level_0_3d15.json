{
  "title": "gen_17_level_0_3d15",
  "code": "Let's push the idea of checking palindromes a bit further by creating a function that is both highly efficient and flexible. It will:\n\n- Ignore case\n- Ignore non-alphanumeric characters (spaces, punctuation)\n- Support Unicode characters properly\n- Use a fast two-pointer technique without creating extra reversed strings\n\nThis goes beyond a naive palindrome check and handles more real-world scenarios.\n\n```python\ndef is_palindrome(word: str) -> bool:\n    \"\"\"\n    Check if the given word is a palindrome, ignoring case and non-alphanumeric characters.\n    Supports Unicode characters properly.\n\n    Args:\n        word (str): The input string to check.\n\n    Returns:\n        bool: True if word is a palindrome, False otherwise.\n    \"\"\"\n    left, right = 0, len(word) - 1\n    \n    while left < right:\n        # Move left pointer to next alphanumeric character or beyond right\n        while left < right and not word[left].isalnum():\n            left += 1\n        # Move right pointer to previous alphanumeric character or before left\n        while right > left and not word[right].isalnum():\n            right -= 1\n        \n        if word[left].casefold() != word[right].casefold():\n            return False\n        \n        left += 1\n        right -= 1\n    \n    return True\n```\n\n### Explanation\n- Using `casefold()` for case-insensitive comparison that works well with Unicode.\n- Skipping non-alphanumeric characters makes it robust for phrases, not just single words.\n- Two-pointer approach is O(n) time and O(1) space.\n\n### Example usage\n\n```python\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))  # True\nprint(is_palindrome(\"No lemon, no melon\"))              # True\nprint(is_palindrome(\"hello\"))                            # False\n```\n\nWould you like me to extend this to check palindrome substrings, or handle streamed input?",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-0"
  ],
  "created_at": "2025-06-11T09:45:25.732610"
}