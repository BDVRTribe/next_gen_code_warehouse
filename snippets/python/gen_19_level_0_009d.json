{
  "title": "gen_19_level_0_009d",
  "code": "Certainly! Let me create a palindrome-checking function that goes beyond the classic approach. I'll provide a solution that:\n\n- Handles Unicode characters gracefully (including accented letters).\n- Ignores case, spaces, punctuation, and other non-alphanumeric characters.\n- Uses a novel approach by normalizing strings with Unicode normalization.\n- Uses a generator to compare characters efficiently without creating new strings.\n\nHere is the code:\n\n```python\nimport unicodedata\nimport string\n\ndef is_palindrome(word: str) -> bool:\n    \"\"\"\n    Checks if the given word is a palindrome, ignoring case, spaces,\n    punctuation, and Unicode normalization differences.\n    \"\"\"\n    # Normalize the string to NFKD form to separate accents from letters\n    normalized = unicodedata.normalize('NFKD', word)\n    \n    # Filter and keep only alphanumeric characters, ignoring case\n    filtered_chars = (ch.lower() for ch in normalized if ch.isalnum())\n    \n    # Convert generator to a list for two-pointer palindrome check\n    filtered_list = list(filtered_chars)\n    \n    # Two-pointer approach to check palindrome without creating reversed string\n    left, right = 0, len(filtered_list) - 1\n    while left < right:\n        if filtered_list[left] != filtered_list[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n```\n\n### Examples:\n```python\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))  # True\nprint(is_palindrome(\"No lemon, no melon\"))              # True\nprint(is_palindrome(\"\u00e9t\u00e9\"))                              # True (accented palindrome)\nprint(is_palindrome(\"Hello\"))                            # False\n```\n\nThis approach is robust for international text and efficient for large inputs since it doesn't create reversed strings or multiple copies unnecessarily.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-0"
  ],
  "created_at": "2025-06-11T09:45:40.059541"
}