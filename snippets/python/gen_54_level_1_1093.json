{
  "title": "gen_54_level_1_1093",
  "code": "Here's a palindrome checker with a novel twist: it supports Unicode normalization and ignores accents and case, making it robust for a wide range of inputs beyond simple ASCII strings.\n\n```python\nimport unicodedata\n\ndef is_palindrome(word: str) -> bool:\n    # Normalize Unicode characters to their canonical form\n    normalized = unicodedata.normalize('NFD', word)\n    # Remove diacritics (accents)\n    stripped = ''.join(ch for ch in normalized if unicodedata.category(ch) != 'Mn')\n    # Convert to lowercase and remove non-alphanumeric chars\n    filtered = ''.join(ch.lower() for ch in stripped if ch.isalnum())\n    # Check palindrome\n    return filtered == filtered[::-1]\n\n# Examples\nprint(is_palindrome(\"R\u00e9ifier\"))  # True (ignores accents)\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))  # True\nprint(is_palindrome(\"hello\"))  # False\n```\n\nWould you like me to create a version that works recursively or uses other paradigms?",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-1"
  ],
  "created_at": "2025-06-11T09:49:03.384405"
}