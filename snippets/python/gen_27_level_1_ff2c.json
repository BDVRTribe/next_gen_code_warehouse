{
  "title": "gen_27_level_1_ff2c",
  "code": "Let's push the concept of palindrome checking beyond the usual straightforward methods and invent a novel approach using a **recursive generator** that yields pairs of characters to compare, stopping early if a mismatch is found. This blends recursion, generators, and early termination in a unique pattern.\n\nHere\u2019s the code:\n\n```python\ndef palindrome_pairs(word):\n    \"\"\"Generator yielding pairs of characters from start and end moving inward.\"\"\"\n    if len(word) <= 1:\n        return  # No pairs to yield\n    yield word[0], word[-1]\n    yield from palindrome_pairs(word[1:-1])\n\ndef is_palindrome(word):\n    \"\"\"Check if a word is palindrome using the palindrome_pairs generator.\"\"\"\n    for left, right in palindrome_pairs(word):\n        if left != right:\n            return False\n    return True\n\n# Example usage\nprint(is_palindrome(\"radar\"))   # True\nprint(is_palindrome(\"hello\"))   # False\nprint(is_palindrome(\"a\"))       # True\nprint(is_palindrome(\"\"))        # True\n```\n\n### Explanation:\n- `palindrome_pairs` recursively yields character pairs from the outer edges inward.\n- `is_palindrome` consumes the pairs until a mismatch or exhaustion.\n- This approach uses recursion and generators to elegantly traverse the string and check palindrome property, a novel pattern beyond typical slicing or iterative index checking.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-1"
  ],
  "created_at": "2025-06-11T09:46:13.647344"
}