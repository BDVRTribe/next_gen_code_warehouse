{
  "title": "gen_47_level_2_c14c",
  "code": "To incorporate a cutting-edge technique into a simple palindrome check, I will demonstrate a small domain-specific language (DSL) approach using Python decorators to define palindrome-related operations, and use a simple model inference style by checking symmetry via a functional programming approach.\n\nThis is a bit over-engineered for a palindrome check but aligns with your request to use advanced patterns.\n\n```python\nfrom typing import Callable\n\n# DSL decorator to register palindrome operations\npalindrome_ops = {}\n\ndef palindrome_op(name: str):\n    def decorator(fn: Callable[[str], bool]):\n        palindrome_ops[name] = fn\n        return fn\n    return decorator\n\n@palindrome_op(\"reverse_compare\")\ndef is_palindrome_reverse(word: str) -> bool:\n    \"\"\"Check palindrome by reversing and comparing.\"\"\"\n    return word == word[::-1]\n\n@palindrome_op(\"two_pointer\")\ndef is_palindrome_two_pointer(word: str) -> bool:\n    \"\"\"Check palindrome using two-pointer technique.\"\"\"\n    left, right = 0, len(word) - 1\n    while left < right:\n        if word[left] != word[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef check_palindrome(word: str, method: str = \"reverse_compare\") -> bool:\n    \"\"\"\n    Check if `word` is a palindrome using the specified method.\n    \n    Available methods:\n    - \"reverse_compare\"\n    - \"two_pointer\"\n    \"\"\"\n    word = word.lower()\n    if method not in palindrome_ops:\n        raise ValueError(f\"Unknown method '{method}'. Available: {list(palindrome_ops.keys())}\")\n    # Model inference simulation: invoke corresponding palindrome op\n    return palindrome_ops[method](word)\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_words = [\"Racecar\", \"Palindrome\", \"Level\", \"Python\"]\n    for w in test_words:\n        print(f\"{w}: {check_palindrome(w)} / {check_palindrome(w, 'two_pointer')}\")\n```\n\n### Explanation:\n- Defined a small DSL via decorator `palindrome_op` to register palindrome checking methods.\n- Provided two implementations (`reverse_compare` and `two_pointer`).\n- `check_palindrome` acts like a model inference dispatcher selecting the method dynamically.\n- Input word is normalized to lowercase for case-insensitive check.\n- This design can be extended with more palindrome \"models\" or strategies.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-2"
  ],
  "created_at": "2025-06-11T09:48:20.368940"
}