{
  "title": "gen_29_level_1_7649",
  "code": "Here's a Python function that checks if a word is a palindrome. To incorporate some advanced features, I'll use a decorator to cache results (memoization) for repeated calls, which can be useful if checking many words multiple times. This uses `functools.lru_cache`.\n\n```python\nfrom functools import lru_cache\n\ndef memoize(func):\n    cache = {}\n    def wrapper(word):\n        if word in cache:\n            return cache[word]\n        result = func(word)\n        cache[word] = result\n        return result\n    return wrapper\n\n@memoize\ndef is_palindrome(word: str) -> bool:\n    \"\"\"\n    Check if the provided word is a palindrome.\n    This function is case-insensitive and ignores non-alphanumeric characters.\n    \"\"\"\n    filtered = ''.join(ch.lower() for ch in word if ch.isalnum())\n    return filtered == filtered[::-1]\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_words = [\"Racecar\", \"Python\", \"A man, a plan, a canal, Panama\", \"No lemon, no melon\"]\n    for w in test_words:\n        print(f\"'{w}' is palindrome? {is_palindrome(w)}\")\n```\n\n### Explanation:\n- The `memoize` decorator caches results for given inputs to avoid repeated computation.\n- The palindrome check is case-insensitive and ignores all non-alphanumeric characters for robustness.\n- This approach uses a custom decorator instead of `lru_cache` to demonstrate explicit decorator creation.\n\nWould you like me to implement concurrency for batch palindrome checking or wrap this as an API?",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-1"
  ],
  "created_at": "2025-06-11T09:46:32.170651"
}