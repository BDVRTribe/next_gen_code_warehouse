{
  "title": "gen_15_level_0_7820",
  "code": "Certainly! Since the task is to write a palindrome checker, and given the freedom to explore new patterns beyond the usual approaches, let's invent a novel way to check palindrome without the typical string reversal or direct indexing.\n\n**Idea:**  \nWe can use Python's `itertools.tee` to create two iterators over the string: one going forward, one going backward, and then compare elements step-by-step. This approach abstracts away direct indexing and reversal, demonstrating a functional style and iterator manipulation.\n\nHere's the code:\n\n```python\nfrom itertools import tee\n\ndef is_palindrome(word: str) -> bool:\n    # Normalize the word: case-insensitive and alphanumeric only\n    filtered = (ch.lower() for ch in word if ch.isalnum())\n    # Create two independent iterators\n    forward, backward = tee(filtered, 2)\n    \n    # Advance backward iterator to the end and then iterate backward\n    # We convert to list since we need reverse iteration\n    backward = reversed(list(backward))\n    \n    for f, b in zip(forward, backward):\n        if f != b:\n            return False\n    return True\n```\n\n### Explanation:\n- We filter out non-alphanumeric characters and lowercase the word to handle sentences or phrases.\n- Use `itertools.tee` to create two independent iterators over the filtered characters.\n- Convert one iterator to a list and reverse it for backward traversal.\n- Compare elements pairwise without relying on direct string slicing or indexing.\n- Return `True` if all characters match, else `False`.\n\n### Example usage:\n\n```python\nprint(is_palindrome(\"Racecar\"))            # True\nprint(is_palindrome(\"A man, a plan, a canal, Panama\"))  # True\nprint(is_palindrome(\"Hello\"))               # False\n```\n\nThis approach is a bit unconventional and leverages Python's iterator tools elegantly.",
  "description": "Write a function to check if a word is a palindrome.",
  "tags": [
    "AI",
    "chamber",
    "level-0"
  ],
  "created_at": "2025-06-11T09:45:13.222716"
}