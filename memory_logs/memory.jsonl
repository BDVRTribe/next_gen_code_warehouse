{"generation": 1, "level": 5, "prompt": "Write a function to check if a word is a palindrome.", "code": "", "scores": {}, "feedback": ""}
{"generation": 2, "level": 5, "prompt": "Write a function that finds the minimum value in a list.", "code": "", "scores": {}, "feedback": ""}
{"generation": 3, "level": 5, "prompt": "Write a function to check if a word is a palindrome.", "code": "", "scores": {}, "feedback": ""}
{"generation": 4, "level": 5, "prompt": "Write a function to check if a word is a palindrome.", "code": "", "scores": {}, "feedback": ""}
{"generation": 5, "level": 5, "prompt": "Write a program that prints the multiplication table of a number.", "code": "", "scores": {}, "feedback": ""}
{"generation": 1, "level": 5, "prompt": "Write a function that finds the minimum value in a list.", "code": null, "scores": {}, "feedback": ""}
{"generation": 1, "level": 5, "prompt": "Create a function that returns the largest of three numbers.", "code": "```python\ndef largest_of_three(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n\n# Example usage:\nprint(largest_of_three(5, 10, 3))  # Output: 10\n```", "scores": {}, "feedback": ""}
{"generation": 1, "level": 5, "prompt": "Write a function that finds the minimum value in a list.", "code": "```python\ndef find_minimum(numbers):\n    if not numbers:\n        return None  # Return None if the list is empty\n    \n    minimum = numbers[0]\n    for num in numbers:\n        if num < minimum:\n            minimum = num\n    return minimum\n\n# Example usage:\nmy_list = [5, 3, 8, 1, 4]\nprint(find_minimum(my_list))  # Output: 1\n```", "scores": {"execution": 0, "structure": 0, "novelty": 0}, "feedback": ""}
{"generation": 1, "level": 5, "prompt": "Write a Python function to return the factorial of a number.", "code": "def factorial(n):\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result\n\n# Example usage:\nprint(factorial(5))  # Output: 120", "scores": {"execution": 10, "structure": 9, "novelty": 3}, "feedback": ""}
{"generation": 2, "level": 4, "prompt": "Write a program that checks if a given year is a leap year.", "code": "def is_leap_year(year):\n    \"\"\"\n    Returns True if the given year is a leap year, False otherwise.\n    Leap year rules:\n    - Year divisible by 4 is a leap year,\n    - Except if divisible by 100, then not a leap year,\n    - Except if divisible by 400, then it is a leap year.\n    \"\"\"\n    if (year % 400) == 0:\n        return True\n    if (year % 100) == 0:\n        return False\n    if (year % 4) == 0:\n        return True\n    return False\n\ndef main():\n    try:\n        year_input = input(\"Enter a year to check if it is a leap year: \")\n        year = int(year_input)\n        if year <= 0:\n            print(\"Please enter a positive integer for the year.\")\n            return\n        if is_leap_year(year):\n            print(f\"{year} is a leap year.\")\n        else:\n            print(f\"{year} is not a leap year.\")\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer year.\")\n\nif __name__ == \"__main__\":\n    main()", "scores": {"execution": 10, "structure": 9, "novelty": 3}, "feedback": ""}
